buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        // NOTE: You should declare only repositories that you need here
        mavenLocal()
        maven {
            name "aliyun1"
            url 'http://maven.aliyun.com/nexus/content/groups/public'
        }
        maven {
            name "aliyun2"
            url 'http://maven.aliyun.com/mvn/repository/'
        }
        maven {
            name "spring repo"
            url "http://repo.spring.io/release"
        }
        maven {
            name "spring milestone"
            url "https://repo.spring.io/milestone/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
       // classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
       // classpath 'org.springframework:springloaded:1.2.6.RELEASE'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.6'
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'

repositories {
    // NOTE: You should declare only repositories that you need here
    mavenLocal()
    maven {
        name "aliyun1"
        url 'http://maven.aliyun.com/nexus/content/groups/public'
    }
    maven {
        name "aliyun2"
        url 'http://maven.aliyun.com/mvn/repository/'
    }
    maven {
        name "spring repo"
        url "http://repo.spring.io/release"
    }
    maven {
        name "spring milestone"
        url "https://repo.spring.io/milestone/"
    }
    jcenter()
    mavenCentral()
}

jar {
    baseName = 'entity-service'
    version = '1.0.0'

    manifest {
        attributes 'Implementation-Title': baseName,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

// Uses JDK 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

task integration(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.16'       
    compileOnly 'org.projectlombok:lombok:1.16.16'

    testCompile "com.google.code.gson:gson:2.8.1",
    			"junit:junit:4.12"


}

check.dependsOn integTest

test {
    // set heap size for the test JVM(s)
    maxHeapSize = "1024m"
    maxParallelForks = 1
    ignoreFailures true

    testLogging {
        // Show that tests are run in the command-line output
        events "started", "passed", "skipped", "failed"
    }

}

integTest {
    // set heap size for the test JVM(s)
    maxHeapSize = "1024m"
    maxParallelForks = 1
    ignoreFailures true

    // uncomment below line for debug propose if necessary
    //jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=6006'
    testLogging {
        // Show that tests are run in the command-line output
        events "started", "passed", "skipped", "failed"
    }
}
